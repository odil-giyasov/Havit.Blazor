@namespace Havit.Blazor.Components.Web.Bootstrap.Internal
@typeparam TValue
@inherits Microsoft.AspNetCore.Components.Forms.InputBase<TValue>

@if (FieldIdentifier.Model != null)
{
	<div class="@CssClassHelper.Combine(
		            "hx-input-date-wrapper input-group",
		            ((IInputWithSize)this).GetInputGroupSizeCssClass(),
		            InputSizeEffective.AsInputGroupCssClass(),
		            (ShowPredefinedDatesEffective && (PredefinedDatesEffective?.Any() ?? false)) ? "hx-input-date-predefined-dates" : null,
		            (CalendarIconEffective is not null) ? "hx-input-date-has-calendar-icon" : null)">
		<HxDropdown CssClass="@CssClassHelper.Combine(
					     "hx-input-date",
					     (LabelTypeEffective == LabelType.Floating) ? "form-floating" : null,
					     InputGroupCssClass)"
					AutoClose="DropdownAutoClose.Outside">

			@if (InputGroupStartText is not null)
			{
				<span class="input-group-text">@InputGroupStartText</span>
			}

			@InputGroupStartTemplate

			<HxDropdownToggleElement @ref="_hxDropdownToggleElement"
									 ElementName="input"
									 CssClass="@CssClassHelper.Combine(InputCssClass, ((IInputWithSize)this).GetInputSizeCssClass())"
									 type="text"
									 Caret="false"
									 id="@InputId"
									 name="@GetNameAttributeValue()"
									 Value="@CurrentValueAsString"
									 ValueChanged="HandleValueChanged"
									 placeholder="@Placeholder"
									 disabled="@(!EnabledEffective)"
									 onfocus="this.select();"
									 @attributes="AdditionalAttributes" />

			@InputGroupEndTemplate

			@if (InputGroupEndText is not null)
			{
				<span class="@CssClassHelper.Combine("input-group-text", RenderPredefinedDates ? null : " rounded-end")">@InputGroupEndText</span>
			}

			@if (LabelTypeEffective == LabelType.Floating)
			{
				<HxFormValueComponentRenderer_Label FormValueComponent="@FormValueComponent" />
			}

			<HxDropdownContent CssClass="hx-input-date-dropdown-menu">
				@if (EnabledEffective)
				{
					<div class="hx-input-date-calendar">
						<HxCalendar Value="@GetDateTimeFromValue(Value)" ValueChanged="HandleCalendarValueChangedAsync" MinDate="@MinDateEffective" MaxDate="@MaxDateEffective" DateCustomizationProvider="GetCalendarDateCustomization" KeyboardNavigation="false" DisplayMonth="@GetCalendarDisplayMonthEffective" TimeProvider="TimeProviderEffective" />
					</div>
					<div class="hx-input-date-dropdown-buttons">
						@if (ShowClearButtonEffective)
						{
							<HxButton Text="@StringLocalizerFactory.GetLocalizedValue("Clear", typeof(HxInputDate))" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="HandleClearClickAsync" tabindex="-1" />
						}
						@if (RenderPredefinedDates)
						{
							foreach (var item in PredefinedDatesEffective)
							{
								<HxButton @key="@item" Text="@StringLocalizerFactory.GetLocalizedValue(item.Label, item.ResourceType)" Color="ThemeColor.Link" Size="ButtonSize.Small" OnClick="() => HandleCustomDateClick(item.GetDateEffective(TimeProviderEffective))" tabindex="-1" />
							}
						}
					</div>
				}
			</HxDropdownContent>
			@if (RenderIcon)
			{
				<div @ref="_iconWrapperElement" class="hx-input-date-icon">
					<HxIcon Icon="CalendarIconEffective" />
				</div>
			}
		</HxDropdown>
	</div>
}
